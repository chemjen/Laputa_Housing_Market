a <- anime1[is_outlier(anime1[,"members"]) == F &
is_outlier(anime1[,"favorites"]) == F,]
colSums(is.na(a))
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
librayry(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='minoringo-croissant777',
token='B62FBB267F6A7DC6E797FBB1CECB4054',
secret='KX9mbD4BoWOZoI7smX/CYwqKtOhBjQ+Q7RBENhEB')
runApp('Desktop/anime')
names(users)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
names(anime1)
runApp('Desktop/anime')
names(anime1)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_ranking <- separate_rows(anime_studio, genre, sep = ', ')
runApp('Desktop/anime')
shiny::runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_studio %>% group_by(studio) %>% summarise(sum(unique(year)))
anime_studio %>% group_by(studio) %>% summarise(nrow(unique(year)))
anime_studio %>% group_by(studio) %>% summarise(length(unique(year)))
anime_studio %>% group_by(studio) %>% summarise(a = length(unique(year))) %>% arrange(a)
anime_studio %>% group_by(studio) %>% summarise(a = length(unique(year))) %>% arrange(desc(a))
anime_studio %>% group_by(studio) %>% summarise(avg_per_year = n()/length(unique(year)))
anime_studio %>% group_by(studio) %>% summarise(avg_per_year = n()/length(unique(year))) %>%
arrange(desc(avg_per_year))
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_studio %>% group_by(studio) %>% summarise(avg_per_year = n()/length(unique(year))) %>%
arrange(desc(avg_per_year))
runApp('Desktop/anime')
displaychoice1 <- c("avg_per_year","average_score", "average_raters", "average_watching", "average_favorites")
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
anime_studio %>% group_by(studio) %>% summarise(avg_per_year = n()/length(unique(year))) %>%
arrange(desc(avg_per_year))
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
raw.df <- readr::read_csv("./data.csv")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
names(raw.df) <- tolower(names(raw.df))
raw.df <- rename(raw.df, cuisine = `cuisine description`)
raw.df <- rename(raw.df, inspection.date = `inspection date`)
# 2. Convert the inspection.date column from character to date format.
raw.df <- raw.df %>% mutate(inspection.date = as.Date(inspection.date, "%m/%d/%Y"))
# 3. Extract the month from the inspection.date column.
raw.df <- raw.df %>% mutate(month=as.numeric(format(inspection.date, "%m")))
# 4. Impute the missing values for the 'grade' column
raw.df <- raw.df %>% mutate(grade = ifelse(0 < score & score < 14 , 'A',
ifelse(score < 28, 'B', 'C')))
# 5. Rename the description from the action column to something short so it won't blow up your graph.
raw.df <- mutate(raw.df, action = gsub(pattern = "Violations were cited in the following area(s).", replacement = "violations", x = action, ignore.case = F, fixed = T)) %>%
mutate(action = gsub(pattern = "No violations were recorded at the time of this inspection.", replacement = "no violations", x = action, ignore.case = F)) %>%
mutate(action = gsub(pattern = "Establishment re-opened by DOHMH", replacement = "reopened", x = action, ignore.case = F)) %>%
mutate(action = gsub(pattern = "Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.", replacement = "closed", x = action, ignore.case = F, fixed = T)) %>%
mutate(action = gsub(pattern = "Establishment re-closed by DOHMH", replacement = "reclosed", x = action, ignore.case = F))
# 6. We want to filter out missing values to make our lives easier for further analysis.
raw.df <- filter(raw.df,
boro != 'Missing' & #Eliminate remaining rows with boro == 'Missing'; confirmed that none are in NYC
inspection.date > '1900-01-01' & #Eliminate rows where the restaurant hasn't been inspected yet
!is.na(score) & #Eliminate rows without a score
score >= 0 #Eliminate rows with a negative score
)
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
raw.df <- select(raw.df, camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
inspections = unique(raw.df)
#Bar plot: Restaurants by borough and grade
ggplot(data=inspections) +
geom_bar(aes(x=boro,fill=grade), position='dodge') +
labs(title='Restaurants by borough and latest grade',
x='Borough',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank())
#Bar plot: Restaurants by cuisine and grade
cuisine_flitered <- inspections %>%
group_by(cuisine) %>%
summarise(count=n()) %>%
top_n(20, count)
inspectionsFiltered = semi_join(inspections, cuisine_flitered, by = 'cuisine')
ggplot(data=inspectionsFiltered) +
geom_bar(aes(x=reorder(cuisine, cuisine, function(x) length(x)), fill=grade), position='dodge') +
labs(title='Restaurants by cuisine and grade',
x='Cuisine',
y='Restaurants') +
scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp()
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
names(animes1)
names(anime1)
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
runApp('Desktop/anime')
# 1.
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
# 3.
t.test(temp$Body.Temp, mu = 98.6)
?aov
# reject the null hypothesis, there is a difference. The 95% confidence interval is
# between 98.122 and 98.376.
# 4.
male_data = temp %>% filter(Gender == "Male")
library(dplyr)
# reject the null hypothesis, there is a difference. The 95% confidence interval is
# between 98.122 and 98.376.
# 4.
male_data = temp %>% filter(Gender == "Male")
female_data = temp %>% filter(Gender == "Female")
var.test(male_data,female_data)
var.test(male_data$Body.Temp, female_data$Body.Temp)
t.tets(male_data$Body.Temp, female_data$Body.Temp)
t.test(male_data$Body.Temp, female_data$Body.Temp)
t.test(male_data$Body.Temp, female_data$Body.Temp, var.equal = TRUE)
# 5.
t.test(male_data$Heart.Rate, female_data$Heart.Rate, alternative = "one-sided")
# 5.
t.test(male_data$Heart.Rate, female_data$Heart.Rate, alternative = "greater")
shiny::runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp()
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
a <- t.test(male_data$Heart.Rate, female_data$Heart.Rate, alternative = "greater")
a$p.value
runApp('Documents/NYCDSA/R_Intro/Project/anime')
# 5.
var.test(male_data$Heart.Rate, female_data$Heart.Rate, alternative = "greater")
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
library(datasets)
data("PlantGrowth")
data2 <- data("PlantGrowth")
data2
load(PlantGrowth)
View(PlantGrowth)
data("PlantGrowth")
PlantGrowth
# 1.
ggplot(PlantGrowth) + geom_boxplot(aes(x = group))
library(ggplot2)
# 1.
ggplot(PlantGrowth) + geom_boxplot(aes(x = group))
# 1.
ggplot(PlantGrowth) + geom_boxplot(aes(x = group, y = weight))
# 2.
sd(PlantGrowth[,group = "ctrl"]$weight)
PlantGrowth[group = "ctrl"]
PlantGrowth[group = "ctrl", ]
PlantGrowth[group == "ctrl", ]
PlantGrowth[, group == "ctrl"]
PlantGrowth[PlantGrowth$group == "ctrl"]
PlantGrowth[PlantGrowth$group == "ctrl", ]
# 2.
sd(PlantGrowth[PlantGrowth$group == "ctrl", ]$weight)
sd(PlantGrowth[PlantGrowth$group == "trt1", ]$weight)
sd(PlantGrowth[PlantGrowth$group == "trt2", ]$weight)
?bartlett.test
bartlett.test(PlantGrowth)
bartlett.test(PlantGrowth, group)
bartlett.test(PlantGrowth, PlantGrowth$group)
bartlett.test(PlantGrowth$weight, PlantGrowth$group)
# 3.
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
?aov
data("HairEyeColor")
HairEyeColor
# 1.
mosaicplot(HairEyeColor, shade = TRUE)
library(dplyr)
# 2.
HairEyeColor %>% filter(sex = Female)
class(HairEyeColor)
# 2.
HairEyeColor["female"]
# 2.
HairEyeColor["Female"]
# 2.
HairEyeColor[,,"Female"]
# 2.
HairEyeColor[,c("Brown", "Blue"),"Female"]
# 2.
data <- HairEyeColor[,c("Brown", "Blue"),"Female"]
mosaicplot(data, shade = TRUE)
chisq.test(data)
shiny::runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp()
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
shiny::runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.statistic                                                #the t-statistic
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
###########################
#####Two-Sample T-Test#####
###########################
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(heights, main = "Sample Distribution of Heights")
abline(h = 70, lwd = 2, lty = 2)
abline(h = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.statistic                                                #the t-statistic
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
t.test(heights, mu = 68, alternative = "greater") #Same test, using the t.test()
###########################
#####Two-Sample T-Test#####
###########################
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
boxplot(SAT.Spring, SAT.Fall, main = "Sample Distribution of SAT Scores",
col = c("red", "blue"), names = c("Spring", "Fall"))
#Manually calculating the t-statistic.
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
################
#####F-Test#####
################
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
#######################
#####One-Way ANOVA#####
#######################
set.seed(0)
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control) #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
summary(aov(chickwts$weight ~ chickwts$feed))
runApp('Documents/NYCDSA/R_Intro/Project/anime')
manga <- anime1 %>% filter(source == "Manga")
ln <- anime1 %>% filter(source == "Light Novel")
t.test(manga$members, ln$members)
runApp('Documents/NYCDSA/R_Intro/Project/anime')
a <- summar(aov(manga$members, ln$members))
a <- summary(aov(manga$members, ln$members))
a <- summary(aov(anime1$members, anime1$source))
anime1$members
anime1$source
nrow(anime1$members)
nrow(anime1$source)
len(anime1$members)
len(anime1$source)
a <- summary(aov(members ~ source, data = anime1))
a
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
summary(aov(score ~ source, data = anime1))
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp('Documents/NYCDSA/R_Intro/Project/anime')
runApp()
runApp('Documents/NYCDSA/R_Intro/Project/anime')
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
a <- var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
a$p.value
t.test?
z
?t.test
runApp('Documents/NYCDSA/R_Intro/Project/anime')
setwd("~/Documents/NYCDSA/Python_ML/ML_Project/Laputa_Housing_Market/Hanbo")
data <- read.csv('train_cleaned.csv')
describe(data)
str(data)
fit <- lm(SalePrice ~ , data = data)
fit <- lm(SalePrice ~ ., data = data)
summary(fit)
empty.model = lm(SalePrice ~ 1, data = data)
scope = list(lower = formula(empty.model) , upper = formula(fit))
library(MASS)
forwardAIC = step(empty.model, scope, direction = "both", k = 2)
data <- read.csv('train_cleaned.csv')
fit <- lm(SalePrice ~ ., data = data)
summary(fit)
data <- read.csv('train_cleaned.csv')
str(data)
data <- read.csv('train_cleaned.csv')
fit <- lm(SalePrice ~ . - SalePrice.1, data = data)
summary(fit)
empty.model = lm(SalePrice ~ 1, data = data)
scope = list(lower = formula(empty.model) , upper = formula(fit))
library(MASS)
forwardAIC = step(empty.model, scope, direction = "both", k = 2)
summary(forwardAIC)
data1 <- read.csv('test_cleaned.csv')
predict(forwardAIC, newdata = data1)
fit2 <- lm(formula = SalePrice ~ Total_SF + OverallQual + richNeigh +
BsmtUnfSF + ST__New + KitchenQual + LotArea + ExterQual +
KitchenAbvGr + BsmtCond + BsmtExposure + OverallCond + Functional +
GaType__BuiltIn + BedroomAbvGr + BsmtFinSF2 + GarageCars +
MSub__120 + Co1__Norm + GaType__None + SC__Normal + X2ndFlrSF +
RStyle__Hip + YearBuilt + GaType__Detchd + HStyle__1Story +
ExterCond + LC__CulDSac + Fireplaces + E1__Plywood + BsmtQual +
FireplaceQu + TotRmsAbvGrd + MoSold + Alley__None + E2__HdBoard +
E1__VinylSd + E1__Wd.Sdng + E2__MetalSd + E2__Plywood, data = data)
predict(fit2, newdata = data1)
fit2 <- lm(SalePrice ~ Total_SF + OverallQual + richNeigh +
BsmtUnfSF + ST__New + KitchenQual + LotArea + ExterQual +
KitchenAbvGr + BsmtCond + BsmtExposure + OverallCond + Functional +
GaType__BuiltIn + BedroomAbvGr + BsmtFinSF2 + GarageCars +
MSub__120 + Co1__Norm + GaType__None + SC__Normal + X2ndFlrSF +
RStyle__Hip + YearBuilt + GaType__Detchd + HStyle__1Story +
ExterCond + LC__CulDSac + Fireplaces + E1__Plywood + BsmtQual +
FireplaceQu + TotRmsAbvGrd + MoSold + Alley__None + E2__HdBoard +
E1__VinylSd + E1__Wd.Sdng + E2__MetalSd + E2__Plywood, data = data)
summary(fit2)
fit <- lm(SalePrice ~ . - SalePrice.1, data = data)
summary(fit)
predict(fit, newdata = data1)
fit <- lm(SalePrice ~ . - SalePrice.1, data = data)
data <- read.csv('train_cleaned.csv')
data1 <- read.csv('test_cleaned.csv')
fit <- lm(SalePrice ~ . - SalePrice.1, data = data)
predict(fit, newdata = data1)
